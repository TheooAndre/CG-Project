uniform float PositionNumber;
//uniform sampler2D text;
varying vec3 N;
varying vec3 P;
uniform vec3  Direcao;
varying vec3  vNormal;

//vec4  cor     = vec4(1, 0, 0, 1 );

float intensity;

void main (void){
 
    //gl_FragColor = gl_Color;
    //---------------------- ortogonal
    //vec2 position = gl_FragCoord.xy / 1000;
    //float depth = gl_FragCoord.z;
    
    //vec3 cor = texture2D ( text, gl_TexCoord[0].st );

    //gl_FragColor = vec4( 1,0,0, 1);
    
    vec3 posL = gl_LightSource[0].position.xyz ;
    vec3 L = normalize( posL - P);
    vec3 V = normalize(-P);
    vec3 R = normalize(-reflect(L,N));
    
    vec3  nNormal= normalize( vNormal);
    intensity = max( dot( nNormal, Direcao), 0.0);
//--------------------------------------------- Ambiente
vec4 luzA = gl_LightSource[0].ambient;
vec4 matA = gl_FrontMaterial.ambient;
vec4 CORA = luzA*matA;
//--------------------------------------------- Diffuse
vec4 luzD = gl_LightSource[0].diffuse;
vec4 matD = gl_FrontMaterial.diffuse;
float intD = max( dot( L, N ), 0.0 );
vec4 corD = luzD*matD;
vec4 CORD = clamp( intD*corD, 0.0, 1.0); ;
//--------------------------------------------- Specular
vec4 luzS = gl_LightSource[0].specular;
vec4 matS = gl_FrontMaterial.specular;
float shin = gl_FrontMaterial.shininess;
float intS = pow( max( dot(R,V), 0.0 ), shin);
vec4 corS = luzS*matS;
vec4 CORS = clamp( intS*corS, 0.0, 1.0);
//vec3 lightColor = vec3(texture2D(text, gl_TexCoord[0].st));
gl_FragColor = CORA + CORD + CORS + vec4( 1,0,0, 1)*intensity;
    
    //gl_FragColor = gl_Color;
 }
 
